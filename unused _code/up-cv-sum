import streamlit as st
import cv2
import sounddevice as sd
import wave
import pyttsx3
import whisper
import requests
import pdfplumber
import numpy as np


# Function to process CV
def process_cv_from_pdf(file_path):
    try:
        with pdfplumber.open(file_path) as pdf:
            text = ''
            for page in pdf.pages:
                text += page.extract_text() + '\n'
        return text.strip()
    except Exception as e:
        st.error(f"Error reading PDF file: {e}")
        return None

# Function to classify CV data using LLM
def classify_cv_data_with_llm(cv_text):
    API_URL = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer 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",
        "Content-Type": "application/json"
    }
    prompt = (
        f"Here is a CV extracted from a PDF file. Please classify the key information "
        f"into skills, experience, and projects:\n\n{cv_text}\n\nClassified Information:"
    )
    payload = {
            "model": "llama3-8b-8192",
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": 400,
            "temperature": 0.6,
        }
    response = requests.post(API_URL, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content']
    else:
        st.error(f"API Error: {response.status_code}, {response.text}")
        return None

# Streamlit page to upload CV
def upload_cv_page():
    st.title("CV Classifier and Interview")
    uploaded_file = st.file_uploader("Upload your CV (PDF)", type="pdf")
    if uploaded_file is not None:
        with open("uploaded_cv.pdf", "wb") as f:
            f.write(uploaded_file.getbuffer())
        cv_text = process_cv_from_pdf("uploaded_cv.pdf")
        if cv_text:
            classified_data = classify_cv_data_with_llm(cv_text)
            st.subheader("Summary of your CV:")
            st.write(classified_data)
            if st.button("Start the Interview"):
                st.session_state.step = "interview"
                st.rerun()

# Main function
def main():
    if 'step' not in st.session_state:
        st.session_state.step = "upload"

    if st.session_state.step == "upload":
        upload_cv_page()
    elif st.session_state.step == "interview":
        interview_page()

if __name__ == "__main__":
    main()
